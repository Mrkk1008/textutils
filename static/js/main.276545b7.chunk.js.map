{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","rows","value","onChange","event","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","split","i","length","substr","join","document","getElementById","select","navigator","clipboard","writeText","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","About","myStyle","aria-labelledby","data-bs-parent","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sMAIe,SAASA,EAAOC,GAC7B,OACE,mCACE,qBACEC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MADtE,SAGE,sBAAKD,UAAU,kBAAf,UACE,cAAC,IAAD,CAAMA,UAAU,eAAeE,GAAG,IAAlC,SACGH,EAAMI,QAET,wBACEH,UAAU,iBACVI,KAAK,SACLC,iBAAe,WACfC,iBAAe,0BACfC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,oBAPb,SASE,sBAAMT,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BU,GAAG,yBAA7C,UACE,qBAAIV,UAAU,kCAAd,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,kBAAkBW,eAAa,OAAOT,GAAG,IAAzD,oBAIF,oBAAIF,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,kBAAkBE,GAAG,SAArC,SACGH,EAAMa,iBAeb,sBAAKZ,UAAS,sCAA8C,UAAbD,EAAME,KAAe,OAAO,SAA3E,UACE,uBACEY,QAASd,EAAMe,WACfd,UAAU,mBACVI,KAAK,WACLM,GAAG,2BAEL,uBAAOV,UAAU,mBAAmBe,QAAQ,yBAA5C,0CCtDC,SAASC,EAASjB,GAC/B,IADsC,EA6CdkB,mBAAS,IA7CK,mBA6C/BC,EA7C+B,KA6CzBC,EA7CyB,KA8CtC,OACE,qCACE,sBACEnB,UAAU,YACVoB,MAAO,CAAEC,MAAsB,SAAftB,EAAME,KAAkB,QAAU,WAFpD,UAIE,oBAAID,UAAU,YAAd,SAA2BD,EAAMuB,UACjC,qBAAKtB,UAAU,OAAf,SACE,0BACEU,GAAG,QACHa,KAAK,IACLvB,UAAU,yBACVwB,MAAON,EACPO,SA1Da,SAACC,GACtBP,EAAQO,EAAMC,OAAOH,QA0DbJ,MAAO,CACLQ,gBAAgC,SAAf7B,EAAME,KAAkB,OAAS,QAClDoB,MAAsB,SAAftB,EAAME,KAAkB,QAAU,eAI/C,wBAAQD,UAAU,4BAA4Ba,QA7D9B,WACpB,IAAIgB,EAAUX,EAAKY,cACnBX,EAAQU,GACR9B,EAAMgC,UAAU,yBAA0B,YA0DtC,kCAGA,wBACE/B,UAAU,4BACVa,QA5DiB,WACvB,IAAIgB,EAAUX,EAAKc,cACnBb,EAAQU,GACR9B,EAAMgC,UAAU,yBAA0B,YAuDtC,kCAMA,wBACE/B,UAAU,4BACVa,QA5DsB,WAE1B,IADA,IAAIgB,EAAUX,EAAKe,MAAM,KAChBC,EAAE,EAAGA,EAAEL,EAAQM,OAAQD,IAC9BL,EAAQK,GAAKL,EAAQK,GAAG,GAAGJ,cAAgBD,EAAQK,GAAGE,OAAO,GAE/DjB,EAASU,EAAQQ,KAAK,MACtBtC,EAAMgC,UAAU,gCAAiC,YAoD/C,8BAMA,wBACE/B,UAAU,4BACVa,QAzDiB,WAEvBM,EADc,IAEdpB,EAAMgC,UAAU,eAAgB,YAoD5B,wBAMA,wBAAQ/B,UAAU,4BAA4Ba,QAvDjC,WACjB,IAAIK,EAAOoB,SAASC,eAAe,SACnCrB,EAAKsB,SACLC,UAAUC,UAAUC,UAAUzB,EAAKM,OACnCzB,EAAMgC,UAAU,sBAAuB,YAmDnC,uBAGA,wBACE/B,UAAU,4BACVa,QArDkB,WACxB,IAAIgB,EAAUX,EAAKe,MAAM,QACzBd,EAAQU,EAAQQ,KAAK,MACrBtC,EAAMgC,UAAU,uBAAwB,YAgDpC,oCAOF,sBACE/B,UAAU,sBACVoB,MAAO,CAAEC,MAAsB,SAAftB,EAAME,KAAkB,QAAU,WAFpD,UAIE,mDACA,8BACGiB,EAAKe,MAAM,KAAKE,OADnB,YACoCjB,EAAKiB,OADzC,iBAGA,8BAAI,KAAQjB,EAAKe,MAAM,KAAKE,OAA5B,mBACA,yCACA,4BAAIjB,EAAKiB,OAAO,EAAEjB,EAAK,8DDtC/BpB,EAAO8C,aAAe,CACpBhC,UAAW,SEnDEiC,MAnBf,SAAe9C,GAKb,OACEA,EAAM+C,OACJ,mCACE,sBACE9C,UAAS,sBAAiBD,EAAM+C,MAAM1C,KAA7B,gCACT2C,KAAK,QAFP,UAIE,iCAXW,SAACC,GAClB,IAAMC,EAAQD,EAAKhB,cACnB,OAAOiB,EAAMC,OAAO,GAAGpB,cAAgBmB,EAAME,MAAM,GASpCC,CAAWrD,EAAM+C,MAAM1C,QAJlC,KAIoDL,EAAM+C,MAAMO,UCZzD,SAASC,EAAMvD,GAK5B,IAAIwD,EAAU,CACZlC,MAAsB,SAAftB,EAAME,KAAkB,QAAU,UACzC2B,gBAAgC,SAAf7B,EAAME,KAAkB,iBAAmB,SAG9D,OACE,sBAAKD,UAAU,YAAf,UACE,oBACEA,UAAU,OACVoB,MAAO,CAAEC,MAAsB,SAAftB,EAAME,KAAkB,QAAU,WAFpD,sBAMA,sBAAKD,UAAU,YAAYU,GAAG,mBAA9B,UACE,sBAAKV,UAAU,iBAAf,UACE,oBAAIA,UAAU,mBAAmBU,GAAG,aAApC,SACE,wBACEV,UAAU,mBACVI,KAAK,SACLgB,MAAOmC,EACPlD,iBAAe,WACfC,iBAAe,eACfE,gBAAc,OACdD,gBAAc,cAPhB,SASE,4DAGJ,qBACEG,GAAG,cACHV,UAAU,mCACVwD,kBAAgB,aAChBC,iBAAe,oBAJjB,SAME,qBAAKzD,UAAU,iBAAiBoB,MAAOmC,EAAvC,+HAMJ,sBAAKvD,UAAU,iBAAf,UACE,oBAAIA,UAAU,mBAAmBU,GAAG,aAApC,SACE,wBACEV,UAAU,6BACVoB,MAAOmC,EACPnD,KAAK,SACLC,iBAAe,WACfC,iBAAe,eACfE,gBAAc,QACdD,gBAAc,cAPhB,SASE,sDAGJ,qBACEG,GAAG,cACHV,UAAU,8BACVwD,kBAAgB,aAChBC,iBAAe,oBAJjB,SAME,qBAAKzD,UAAU,iBAAiBoB,MAAOmC,EAAvC,oQAQJ,sBAAKvD,UAAU,iBAAf,UACE,oBAAIA,UAAU,mBAAmBU,GAAG,eAApC,SACE,wBACEV,UAAU,6BACVoB,MAAOmC,EACPnD,KAAK,SACLC,iBAAe,WACfC,iBAAe,iBACfE,gBAAc,QACdD,gBAAc,gBAPhB,SASE,6DAGJ,qBACEG,GAAG,gBACHV,UAAU,8BACVwD,kBAAgB,eAChBC,iBAAe,oBAJjB,SAME,qBAAKzD,UAAU,iBAAiBoB,MAAOmC,EAAvC,0O,WCrCGG,MAnDf,WAAgB,IAAD,EACWzC,mBAAS,SADpB,mBACNhB,EADM,KACA0D,EADA,OAEa1C,mBAAS,MAFtB,mBAEN6B,EAFM,KAECc,EAFD,KAIP7B,EAAY,SAAC8B,EAASzD,GAC1BwD,EAAS,CACPP,IAAKQ,EACLzD,KAAMA,IAER0D,YAAW,WACTF,EAAS,QACR,MAgBL,OACE,mCACE,eAAC,IAAD,WACE,cAAC9D,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAMa,WAhBzB,WACJ,UAATb,GACF0D,EAAQ,QACRrB,SAASyB,KAAK3C,MAAMQ,gBAAkB,UACtCG,EAAU,6BAA8B,WACxCO,SAASnC,MAAQ,0BAEjBwD,EAAQ,SACRrB,SAASyB,KAAK3C,MAAMQ,gBAAkB,QACtCG,EAAU,8BAA+B,WACzCO,SAASnC,MAAQ,6BAOf,cAAC,EAAD,CAAO2C,MAAOA,IACd,qBAAK9C,UAAU,iBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOgE,OAAK,EAACC,KAAK,IAAlB,SACE,cAACjD,EAAD,CACEe,UAAWA,EACXT,QAAQ,4BACRrB,KAAMA,MAGV,cAAC,IAAD,CAAO+D,OAAK,EAACC,KAAK,SAAlB,SACE,cAACX,EAAD,iBCrCCY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASC,eAAe,SAM1B2B,M","file":"static/js/main.276545b7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            {props.title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" to=\"/about\">\r\n                  {props.aboutText}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input\r\n                onClick={props.toggleMode}\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n                Enable DarkMode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\nNavbar.defaultProps = {\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase\", \"success\");\r\n  };\r\n\r\n  const handleLowerClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase\", \"success\");\r\n  };\r\n\r\n  const handleCapitalizedCase = () =>{\r\n      let newText = text.split(\" \");\r\n      for (let i=0; i<newText.length; i++){\r\n        newText[i] = newText[i][0].toUpperCase() + newText[i].substr(1);\r\n      }\r\n      setText((newText.join(\" \")));\r\n      props.showAlert(\"Converted to Capitalized Case\", \"success\");\r\n  }\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared\", \"success\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to Clipboard\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed\", \"success\");\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1 className=\"mx-1 my-1\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            className=\"form-control mx-2 my-1\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }}\r\n          />\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2 my-1\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary mx-2 my-1\"\r\n          onClick={handleLowerClick}\r\n        >\r\n          Convert to Lowercase\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary mx-2 my-1\"\r\n          onClick={handleCapitalizedCase}\r\n        >\r\n          Capitalized Case\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary mx-2 my-1\"\r\n          onClick={handleClearClick}\r\n        >\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2 my-1\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary mx-2 my-1\"\r\n          onClick={handleExtraSpaces}\r\n        >\r\n          Remove Extra Spaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container mx-2 my-1\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words , {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something in textbox above to preview it here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word)=>{\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    props.alert && (\r\n      <>\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n      </>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\n\r\nexport default function About(props) {\r\n  // const [myStyle, setMyStyle] = useState({\r\n  //     color: 'black',\r\n  //     backgroundColor: 'white'\r\n  // })\r\n  let myStyle = {\r\n    color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n    backgroundColor: props.mode === \"dark\" ? \"rgb(36 74 104)\" : \"white\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1\r\n        className=\"my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        About Us\r\n      </h1>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              <strong>Analyze Your text </strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              Textutils gives you a way to analyze your text quickly and\r\n              efficiently. Be it word count, character count or\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              <strong>Free to use </strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              TextUtils is a free character counter tool that provides instant\r\n              character count & word count statistics for a given text.\r\n              TextUtils reports the number of words and characters. Thus it is\r\n              suitable for writing text with word/ character limit.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              <strong>Browser Compatible </strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              This word counter software works in any web browsers such as\r\n              Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to\r\n              count characters in facebook, blog, books, excel document, pdf\r\n              document, essays, etc.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport About from \"./components/About\";\nimport { HashRouter as Router, Switch, Route} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/\">\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter the text to analyze\"\n                mode={mode}\n              />\n            </Route>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}